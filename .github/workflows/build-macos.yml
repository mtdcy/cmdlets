name: Build cmdlets macos

on:
  push:
    paths:
      - Makefile
      - ulib.sh
      - libs/**.u
      - .github/workflows/build-latest.yml
    branches:
      - main

jobs:
  build-on-remote:
    runs-on: ubuntu-latest
    container: ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/builder:alpine-latest
    steps:
      - name: Checkout (main)
        uses: https://git.mtdcy.top/actions/checkout@v3
        with:
          ref: ${{ github.sha }}
          fetch-depth: 2
          show-progress: false

      - name: Prepare
        id: prepare
        shell: bash
        run: |
          set -x

          # fix: detected dubious ownership in repository
          git config --global --add safe.directory "$PWD"

          mkdir -p ~/.ssh
          cat > ~/.ssh/id_rsa <<< "${{ secrets.HOST_SSH_ID_RSA }}"
          chmod 0600 ~/.ssh/id_rsa
          workdir=cmdlets-$$
          ssh -o StrictHostKeyChecking=no \
            ${{ vars.REMOTE_HOST_MACOS }} \
            mkdir -p "$workdir"
          echo "workdir=$workdir" >> "$GITHUB_OUTPUT"

          files=($(git show --pretty="" --name-only ${{ github.sha }} | grep -w "^libs")) || true
          for x in ${files[@]}; do
            x=$(basename ${x%.u})
            [[ "$x" =~ ^_ ]] && continue ## ignored files
            [[ "$x" =~ ^@ ]] && continue ## ignored files
            cmdlets+=("$x")
          done
          [ -n "${cmdlets[*]}" ] || cmdlets=(zlib)
          echo "cmdlets=$(IFS=','; echo "${cmdlets[*]}")" | tee -a $GITHUB_OUTPUT

      - name: Build (remote)
        if: always()
        shell: bash
        run: |
          set -x
          export NJOBS=1
          export REMOTE_HOST=${{ vars.REMOTE_HOST_MACOS }}
          export REMOTE_WORKDIR=${{ steps.prepare.outputs.workdir }}

          ret=0
          fails=()
          cmdlets=${{ steps.prepare.outputs.cmdlets }}
          for x in ${cmdlets//,/ }; do
            make -j1 "$x"
            ret=$?
            [ "$ret" -eq 0 ] || fails+=("$x")
          done


          if [ "$ret" -ne 0 ]; then
            # always pull from remote
            make pull-remote || true

            echo "fails: ${fails[*]}" | tee -a logs/fails.log
          fi
          exit $ret

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          set -x
          ssh ${{ vars.REMOTE_HOST_MACOS }} rm -rf ${{ steps.prepare.outputs.workdir }}

      - name: Deploy (artifacts)
        if: always()
        uses: https://git.mtdcy.top/actions/rsync@7.0.1
        with:
          switches: -avc --exclude='packages.lst'
          path: prebuilts/
          remote_path: ${{ vars.ARTIFACTS_REMOTE_PATH }}/cmdlets/latest/
          remote_host: ${{ vars.ARTIFACTS_REMOTE_HOST }}
          remote_port: ${{ vars.ARTIFACTS_REMOTE_PORT }}
          remote_user: ${{ vars.ARTIFACTS_REMOTE_USER }}
          remote_key: ${{ secrets.ARTIFACTS_REMOTE_TOKEN }}

      - name: Deploy (packages)
        if: always()
        uses: https://git.mtdcy.top/actions/rsync@7.0.1
        with:
          switches: -avc
          path: packages/
          remote_path: ${{ vars.ARTIFACTS_REMOTE_PATH }}/packages/
          remote_host: ${{ vars.ARTIFACTS_REMOTE_HOST }}
          remote_port: ${{ vars.ARTIFACTS_REMOTE_PORT }}
          remote_user: ${{ vars.ARTIFACTS_REMOTE_USER }}
          remote_key: ${{ secrets.ARTIFACTS_REMOTE_TOKEN }}

      - name: Deploy (logs)
        if: failure()
        uses: https://git.mtdcy.top/actions/rsync@7.0.1
        with:
          switches: -avc
          path: logs/
          remote_path: ${{ vars.ARTIFACTS_REMOTE_PATH }}/cmdlets/logs/
          remote_host: ${{ vars.ARTIFACTS_REMOTE_HOST }}
          remote_port: ${{ vars.ARTIFACTS_REMOTE_PORT }}
          remote_user: ${{ vars.ARTIFACTS_REMOTE_USER }}
          remote_key: ${{ secrets.ARTIFACTS_REMOTE_TOKEN }}

      - name: Notify on failure
        if: failure()
        shell: bash
        run: |
          curl --version
          curl -vL ${{ vars.NOTIFY_WEBHOOK }} \
              -H 'Content-Type: application/json' \
              --data @<(cat <<EOF
              {
                "token": "${{ secrets.NOTIFY_TOKEN }}",
                "title": "${{ github.repository }} ${{ job.status }}",
                "text":  "$(git show --abbrev-commit -s ${{ github.sha }} | sed 's/$/\\n/g')"
              }
          EOF
              )
