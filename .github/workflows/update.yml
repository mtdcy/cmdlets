---
name: Update cmdlets

on:
  schedule:
    - cron: '0 0 * * *'  # daily

# push:
#   paths: null
#   branches:
#     - main

  workflow_dispatch: null

jobs:
  update:
    runs-on: ubuntu-latest
    container: ${{ vars.REGISTRY }}/${{ vars.REGISTRY_USER }}/builder:ubuntu-latest
    steps:
      - name: Checkout (main)
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.COMMIT_TOKEN }}

      - name: Update
        shell: bash
        run: |
          pwd -P

          git config --global user.name "bot"
          git config --global user.email "bot@mtdcy.top"
          git config --global --add safe.directory '*'

          export CL_NJOBS=1
          export CL_LOGGING=silent

          commits=/tmp/commits-$$.txt
          true > "$commits"  # create empty file

          for libs in libs/*; do
            libs="${libs#*/}"
            libs="${libs%.*}"

            # ignores
            [[ "$libs" =~ ^ALL    ]] && continue
            [[ "$libs" =~ ^[.@_]  ]] && continue

            # update 
            (
              . libs.sh
              _load $libs

              test -n "$libs_ver" || exit

              # version in url?
              echo "$libs_url" | grep -Fw "$libs_ver" || exit

              trap "git checkout 'libs/$libs.s'" EXIT

              IFS='=.' read -r m n r _ <<< "$libs_ver"

              if test -n "$r"; then
                newver="$m.$n.$((r+1))"
                bash libs.sh update "$libs" "$newver" || exit
              elif test -n "$n"; then
                newver="$m.$((n+1))"
                bash libs.sh update "$libs" "$newver" || exit
              else
                exit
              fi

              slogi "updated $libs => $newver"

              git add "libs/$libs.s"
              echo "updated $libs => $newver" >> "$commits"
            ) || true
          done

          test -s "$commits" || exit 0

          git status

          git commit -F- <<EOF
          [AutoUpdated] update libs

          $(cat "$commits")
          EOF

          git push

      # sync only packages
      - name: Deploy (packages)
        if: ${{ vars.ARTIFACTS_REMOTE_HOST != '' }}
        uses: actions/rsync@7.0.1
        with:
          switches: -avc
          path: packages/
          remote_path: ${{ vars.ARTIFACTS_REMOTE_PATH }}/packages/
          remote_host: ${{ vars.ARTIFACTS_REMOTE_HOST }}
          remote_port: ${{ vars.ARTIFACTS_REMOTE_PORT }}
          remote_user: ${{ vars.ARTIFACTS_REMOTE_USER }}
          remote_key: ${{ secrets.ARTIFACTS_REMOTE_TOKEN }}
