---
name: Check cmdlets installer

on:
  push:
    paths:
      - cmdlets.sh
    branches:
      - main

  workflow_dispatch: null

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Install cmdlets.sh
        shell: bash
        run: |
          if curl --fail --connect-timeout 3 -o /dev/null -sIL https://git.mtdcy.top/mtdcy/cmdlets; then
            bash -ex -c "$(curl -fsSL http://git.mtdcy.top/mtdcy/cmdlets/raw/branch/main/cmdlets.sh)" install
          else
            bash -ex -c "$(curl -fsSL https://raw.githubusercontent.com/mtdcy/cmdlets/main/cmdlets.sh)" install
          fi

      - name: Test cmdlets.sh
        shell: bash
        run: |
          set -ex

          which cmdlets.sh
          pushd "$(which cmdlets.sh | xargs dirname)"

          # cmdlet: 
          cmdlets.sh install minigzip
          find prebuilts/bin/minigzip
          ls -l minigzip
          rm -rf minigzip prebuilts

          cmdlets.sh install minigzip@1.3.1:minigzip
          find prebuilts/bin/minigzip
          ls -l minigzip
          rm -rf minigzip prebuilts

          cmdlets.sh install zlib/minigzip@1.3.1:minigzip
          find prebuilts/bin/minigzip
          ls -l minigzip
          rm -rf minigzip prebuilts

          # library:
          cmdlets.sh library libz
          find . -name "prebuilts/lib/libz.a"
          find . -name "prebuilts/include/zlib.h"
          rm -rf prebuilts

          # package: 
          cmdlets.sh package zlib
          find prebuilts/bin/minigzip
          find prebuilts/lib/libz.a
          find prebuilts/include/zlib.h
          rm -rf prebuilts

          cmdlets.sh package zlib@1.3.1
          find prebuilts/bin/minigzip
          find prebuilts/lib/libz.a
          find prebuilts/include/zlib.h
          rm -rf prebuilts

          # v3: versioned pkgfile
          cmdlets.sh install bash@3.2:bash
          ./bash --version | grep -w "3.2"
          rm -rf bash@3.2 bash prebuilts

      - name: Notify on failure
        if: ${{ failure() && vars.NOTIFY_WEBHOOK != '' }}
        shell: bash
        run: |-
          curl --version
          curl -vL ${{ vars.NOTIFY_WEBHOOK }} \
              -H 'Content-Type: application/json' \
              --data @<(cat <<EOF
              {
                "token": "${{ secrets.NOTIFY_TOKEN }}",
                "title": "${{ github.repository }} ${{ job.status }}",
                "text":  "$(git show --abbrev-commit -s ${{ github.sha }} | sed 's/$/\\n/g')"
              }
          EOF
              )
